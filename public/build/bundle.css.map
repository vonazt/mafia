{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import io from 'socket.io-client';\n  import axios from 'axios';\n  let thisPlayer = { name: `` };\n\n  const socket = io('http://localhost:5000');\n\n  let gameId;\n\n  let joinId;\n\n  let gameError;\n\n  let players = [];\n  let playerToNominate = {};\n  let mafia = [];\n\n  $: joinedMafia = mafia.join(`, `);\n\n  let stages = {};\n\n  let confirmInvestigation = false;\n\n  $: console.log('stages are', stages);\n\n  const handleCreate = async () => {\n    const { data: game } = await axios.post(`/api/create`);\n    gameId = game.gameId;\n    stages = { ...game.stages };\n  };\n\n  const handleJoin = async () => {\n    console.log('joining', joinId);\n    const { data: game } = await axios.post(`/api/join`, { gameId: joinId });\n    console.log('game after join is', game);\n    if (!game) {\n      return (gameError = `Game not found`);\n    }\n    players = [...game.players];\n    gameId = game.gameId;\n  };\n\n  const addPlayer = (e) => {\n    e.preventDefault();\n    sessionStorage.setItem(`thisPlayer`, JSON.stringify(thisPlayer));\n    axios.put(`/api/${gameId}/players`, { player: thisPlayer });\n  };\n\n  socket.on(`addedPlayer`, (playersResponse) => {\n    console.log('players response', playersResponse);\n    thisPlayer = playersResponse.find(\n      (player) => thisPlayer.name === player.name,\n    );\n    console.log('this plater is', thisPlayer);\n    sessionStorage.setItem(`thisPlayer`, JSON.stringify(thisPlayer));\n    players = [...playersResponse];\n  });\n\n  socket.on(`reconnected`, (updatedPlayer) => {\n    console.log('updted player', updatedPlayer);\n    thisPlayer = { ...updatedPlayer };\n    sessionStorage.setItem(`thisPlayer`, JSON.stringify(thisPlayer));\n  });\n\n  // $: console.log(\n  //   'connected players',\n  //   players.filter(({ connected }) => connected),\n  // );\n\n  // $: console.log('this player is', thisPlayer);\n\n  socket.on(`assignedRoles`, (assignedRole, otherMafia) => {\n    console.log('your role is', assignedRole);\n    thisPlayer = { ...thisPlayer, role: assignedRole };\n    if (otherMafia) mafia = [...otherMafia];\n  });\n\n  // $: console.log('role is', thisPlayer.role);\n\n  const handleStart = () => {\n    socket.emit(`start`, gameId);\n  };\n\n  let playerToDie;\n\n  socket.on(`gameStarted`, (updatedStages) => {\n    stages = { ...updatedStages };\n  });\n\n  let nominating = false;\n  const handleNominatePlayer = (playerToNominate) => {\n    if (stages.mafiaAwake) {\n      return socket.emit(`assassinate`, playerToNominate, thisPlayer, gameId);\n    }\n    if (stages.detectiveAwake) {\n      confirmInvestigation = false;\n      investigating = true;\n      return socket.emit(`investigate`, playerToNominate, thisPlayer, gameId);\n    }\n    if (stages.day) {\n      playerToNominate = { ...playerToNominate };\n      return socket.emit(`nominate`, playerToNominate, thisPlayer, gameId);\n    }\n    if (stages.twoNominations) {\n      console.log('lynching player');\n      confirmNomination = false;\n      nominating = true;\n      playerToNominate = { ...playerToNominate };\n      return socket.emit(`lynch`, playerToNominate, thisPlayer, gameId);\n    }\n  };\n\n  socket.on(`postAssassination`, (updatedGame) => {\n    thisPlayer = updatedGame.players.find(\n      ({ name }) => name === thisPlayer.name,\n    );\n    players = [...updatedGame.players];\n    if (updatedGame.nominatedPlayers.length) {\n      playerToDie = { ...updatedGame.nominatedPlayers[0] };\n    }\n  });\n\n  const handleConfirmAssassination = () => {\n    console.log(`confirmed that ${playerToDie.name} will be killed`);\n    socket.emit(`confirmAssassination`, playerToDie, gameId);\n  };\n\n  const getNominatedBy = (nominatedBy) => {\n    const nominators = nominatedBy\n      .filter(({ _id }) => _id !== thisPlayer._id)\n      .map(({ name }) => name);\n    return nominators.length ? `Nominated by ${nominators.join(`, `)}` : ``;\n  };\n\n  socket.on(`detectiveAwake`, (updatedGame) => {\n    stages = { ...updatedGame.stages };\n  });\n  let investigating = false;\n\n  let playerToInvestigate = {};\n  const handleConfirmInvestigation = (player) => {\n    playerToInvestigate = { ...player };\n    confirmInvestigation = true;\n  };\n\n  let investigationResult = ``;\n\n  socket.on(`investigationResult`, (isMafia, investigatedPlayer) => {\n    investigating = false;\n    investigationResult = `${investigatedPlayer.name} ${\n      isMafia ? `is` : `is not`\n    } a member of the mafia`;\n  });\n\n  const handleEndDetectiveStage = () => {\n    investigationResult = ``;\n    socket.emit(`endDetectiveTurn`, gameId);\n  };\n\n  let deadPlayers = [];\n  $: console.log('dead players are', deadPlayers);\n\n  let lastPlayerKilled = {};\n\n  socket.on(`day`, (updatedGame) => {\n    console.log('updated game is', updatedGame);\n    stages = { ...updatedGame.stages };\n    lastPlayerKilled = { ...updatedGame.lastPlayerKilled };\n    thisPlayer = updatedGame.players.find(({ _id }) => _id === thisPlayer._id);\n    players = [...updatedGame.players];\n  });\n\n  let confirmNomination = false;\n  const handleConfirmNomination = (player) => {\n    playerToNominate = { ...player };\n    confirmNomination = true;\n  };\n\n  let nominatedPlayers = [];\n\n  socket.on(`postNomination`, (updatedGame) => {\n    console.log('updated hame post nonmination', updatedGame);\n    players = [...updatedGame.players];\n    stages = { ...updatedGame.stages };\n    thisPlayer = updatedGame.players.find(({ _id }) => _id === thisPlayer._id);\n    nominatedPlayers = [...updatedGame.nominatedPlayers];\n  });\n\n  socket.on(`postLynching`, (updatedGame) => {\n    console.log('updated hame post ly ching', updatedGame);\n    players = [...updatedGame.players];\n    stages = { ...updatedGame.stages };\n    thisPlayer = updatedGame.players.find(({ _id }) => _id === thisPlayer._id);\n    lastPlayerKilled = { ...updatedGame.lastPlayerKilled };\n    nominatedPlayers = [...updatedGame.nominatedPlayers];\n  });\n\n  $: console.log('players area', players);\n\n  $: console.log('stages are', stages);\n\n  const canNominate = (player, thisPlayer, stages) => {\n    return (\n      (player.isAlive && thisPlayer.role === `mafia` && stages.mafiaAwake) ||\n      (thisPlayer.role === `detective` &&\n        thisPlayer.isAlive &&\n        stages.detectiveAwake &&\n        !investigating) ||\n      (stages.day && player.isAlive && thisPlayer.isAlive) ||\n      (!nominating &&\n        thisPlayer.isAlive &&\n        stages.twoNominations &&\n        nominatedPlayers.some(({ _id }) => _id === player._id))\n    );\n  };\n</script>\n\n<style>\n  button {\n    height: 5rem;\n    width: 15rem;\n  }\n\n  .container {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n  }\n\n  .mafia {\n    cursor: pointer;\n  }\n\n  .dead {\n    text-decoration: line-through;\n  }\n</style>\n\n<main>\n  <div class=\"container\">\n    {#if !gameId}\n      <div><button on:click={handleCreate}>Create</button></div>\n      <div>\n        {#if gameError}\n          <p>{gameError}</p>\n        {/if}\n        <input bind:value={joinId} />\n        <button on:click={handleJoin}>Join</button>\n      </div>\n    {:else}\n      <div width=\"100%\">\n        <p>YOU'RE IN ROOM {gameId}</p>\n      </div>\n      <div width=\"100%\">\n        <form>\n          <label>Name <input bind:value={thisPlayer.name} /></label><button\n            on:click={addPlayer}>Add player</button>\n        </form>\n        <ol>\n          {#each players as player}\n            {#if canNominate(player, thisPlayer, stages)}\n              <input\n                type=\"radio\"\n                value={player}\n                bind:group={playerToNominate}\n                on:click={() => {\n                  if (stages.mafiaAwake) {\n                    handleNominatePlayer(player);\n                  }\n                  if (stages.detectiveAwake) {\n                    handleConfirmInvestigation(player);\n                  }\n                  if (stages.day) {\n                    handleNominatePlayer(player);\n                  }\n                  if (stages.twoNominations) {\n                    handleConfirmNomination(player);\n                  }\n                }} />\n            {/if}\n            <li\n              class:mafia={thisPlayer.role === `mafia`}\n              class:dead={!player.isAlive}>\n              {player.name}\n              {#if (thisPlayer.role === `mafia` && player.nominatedBy.length) || (stages.day && player.isAlive && player.nominatedBy.length)}\n                <span>{getNominatedBy(player.nominatedBy)}</span>\n              {/if}\n            </li>\n          {/each}\n        </ol>\n        Registered players:\n        {players.length}\n        {#if players.length >= 6}\n          <button on:click={handleStart}>Start</button>\n        {/if}\n      </div>\n      {#if thisPlayer.role}\n        <div width=\"100%\">\n          <p>You are a {thisPlayer.role}</p>\n          {#if mafia.length}\n            <p>The other mafia are {joinedMafia}</p>\n          {/if}\n        </div>\n      {/if}\n      {#if stages.mafiaAwake}\n        <p>\n          Night settles on the city. The citizens go to sleep. The mafia awake.\n          They chose someone to kill.\n        </p>\n      {/if}\n      {#if playerToDie && stages.mafiaAwake}\n        <p>{playerToDie.name} will be sent to sleep with the fishes</p>\n        <button on:click={handleConfirmAssassination}>Confirm</button>\n      {/if}\n      {#if stages.detectiveAwake}\n        <p>A murder has been committed this night.</p>\n        <p>The detective awakens to begin their investigations</p>\n        {#if confirmInvestigation}\n          <button\n            on:click={() => handleNominatePlayer(playerToInvestigate)}>Investigate\n            {playerToInvestigate.name}?</button>\n        {/if}\n        {#if investigationResult}\n          <p>{investigationResult}</p>\n          <button on:click={() => handleEndDetectiveStage()}>OK</button>\n        {/if}\n      {/if}\n      {#if stages.day}\n        <p>\n          A murder has been committed.\n          {lastPlayerKilled.name}\n          has been murdered in their sleep.\n        </p>\n        <p>The townfolk gather to find the criminals in their midst.</p>\n\n        {#if playerToNominate.name}\n          <p>You nominated {playerToNominate.name}</p>\n        {/if}\n      {/if}\n      {#if stages.twoNominations}\n        <p>\n          {nominatedPlayers.map(({ name }) => name).join(` and `)}\n          have been accused by the townsfolk. One of them must die. Pick one.\n        </p>\n        {#if confirmNomination}\n          <button on:click={handleNominatePlayer(playerToNominate)}>Nominate\n            {playerToNominate.name}</button>\n        {/if}\n      {/if}\n      {#if stages.playerLynched}\n        <p>{lastPlayerKilled.name} was murdered by the townfolk</p>\n        <p>{lastPlayerKilled.name} was a {lastPlayerKilled.role}</p>\n      {/if}\n    {/if}\n  </div>\n</main>\n"
  ],
  "names": [],
  "mappings": "AA0NE,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,AACd,CAAC,AAED,UAAU,eAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,eAAe,CAAE,YAAY,AAC/B,CAAC"
}